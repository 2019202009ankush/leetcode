class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()==0) {
            if(nums2.size()%2==0)
            {
                return (nums2[nums2.size()/2]+nums2[(nums2.size()/2)-1])/2.0;
            }
            else
                return (nums2[nums2.size()/2]);
        }
         if(nums2.size()==0) {
            if(nums1.size()%2==0)
            {
                return (nums1[nums1.size()/2]+nums1[(nums1.size()/2)-1])/2.0;
            }
            else
                return (nums1[nums1.size()/2]);
        }
        else
        {
           if(nums1.size()>nums2.size()) return findMedianSortedArrays(nums2,nums1);
           int x=nums1.size();
           int y=nums2.size();
           int l=0;
           int h=nums1.size();
           while(l<=h)
           {
               int pX=(l+h)/2;
               int pY=((x+y+1)/2) - pX;
               // cout<<pX<<"    "<<pY<<endl;
               int minL=pX==x?INT_MAX:nums1[pX];
               int maxL=pX==0?INT_MIN:nums1[pX-1];
               int minR=pY==y?INT_MAX:nums2[pY];
               int maxR=pY==0?INT_MIN:nums2[pY-1];
               // cout<<maxL<<"  "<<minL<<"  "<<maxR<<"  "<<minR<<endl;
               if(maxL<=minR&&maxR<=minL)
               {
                  if((x+y)%2==0){
                      return (max(maxL,maxR)+min(minL,minR))/2.0;
                  }
                   else
                       return max(maxL,maxR);
               }
               else if(maxL>minR) h=pX-1;
               else l=pX+1;
           }
            return -1;
        }
    }
};